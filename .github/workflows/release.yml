name: Nova Release

on:
  push:
    tags: 
      - 'v*.*.*'      # Release for stable versions like v1.0.0
      - 'v*.*.*-*'    # Release for pre-release versions like v1.0.0-alpha

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: nova-linux-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: nova-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: nova-macos-arm64

    steps:
      - name: 1. Checkout Code
        uses: actions/checkout@v4

      - name: 2. Setup Deno environment
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: 3. Compile application for specific target
        run: |
          if [ "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ]; then
            deno compile --no-check --allow-net --allow-read --allow-env --allow-write --allow-ffi --allow-sys --allow-run --target x86_64-unknown-linux-gnu --output ${{ matrix.artifact_name }} main.ts
          elif [ "${{ matrix.target }}" == "x86_64-apple-darwin" ]; then
            deno compile --no-check --allow-net --allow-read --allow-env --allow-write --allow-ffi --allow-sys --allow-run --target x86_64-apple-darwin --output ${{ matrix.artifact_name }} main.ts
          elif [ "${{ matrix.target }}" == "aarch64-apple-darwin" ]; then
            deno compile --no-check --allow-net --allow-read --allow-env --allow-write --allow-ffi --allow-sys --allow-run --target aarch64-apple-darwin --output ${{ matrix.artifact_name }} main.ts
          fi

      - name: 4. Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: 1. Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 2. Create GitHub Release and attach artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Nova ${{ github.ref_name }}
          body: 'New Nova Version available!'
          files: |
            artifacts/nova-linux-amd64/nova-linux-amd64
            artifacts/nova-macos-amd64/nova-macos-amd64
            artifacts/nova-macos-arm64/nova-macos-arm64

  update-homebrew:
    name: Homebrew Tap actualisation
    runs-on: ubuntu-latest
    needs: create-github-release
    steps:
      - name: Update Homebrew Formula
        uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: nova
          homebrew-tap: munichbughunter/homebrew-nova
          tag-name: ${{ github.ref_name }}
        env:
          COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

  # notify-discord:
  #   name: Send Discord Notification
  #   runs-on: ubuntu-latest
  #   needs: update-homebrew
  #   steps:
  #     - name: Send Discord Notification
  #       uses: rjstone/discord-webhook-notify@v1
  #       with:
  #         webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
  #         description: |
  #           ðŸš€ **Nova Release: ${{ github.ref_name }}**
            
  #           A new version of Nova has been successfully released!

  #           **Installation/Update via Homebrew:**
  #           ```
  #           brew upgrade nova
  #           ```
  #         footer: Nova Release Pipeline
  #         color: 3447003
