name: Nova Release

on:
  push:
    tags: 
      - 'v*.*.*'      # Release for stable versions like v1.0.0
      - 'v*.*.*-*'    # Release for pre-release versions like v1.0.0-alpha

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: nova-linux-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: nova-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: nova-macos-arm64

    steps:
      - name: 1. Checkout Code
        uses: actions/checkout@v4

      - name: 2. Setup Deno environment
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: 3. Compile application for specific target
        run: |
          if [ "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ]; then
            deno compile --no-check --allow-net --allow-read --allow-env --allow-write --allow-ffi --allow-sys --allow-run --target x86_64-unknown-linux-gnu --output ${{ matrix.artifact_name }} main.ts
          elif [ "${{ matrix.target }}" == "x86_64-apple-darwin" ]; then
            deno compile --no-check --allow-net --allow-read --allow-env --allow-write --allow-ffi --allow-sys --allow-run --target x86_64-apple-darwin --output ${{ matrix.artifact_name }} main.ts
          elif [ "${{ matrix.target }}" == "aarch64-apple-darwin" ]; then
            deno compile --no-check --allow-net --allow-read --allow-env --allow-write --allow-ffi --allow-sys --allow-run --target aarch64-apple-darwin --output ${{ matrix.artifact_name }} main.ts
          fi

      - name: 4. Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: 1. Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 2. Create GitHub Release and attach artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Nova ${{ github.ref_name }}
          body: 'New Nova Version available!'
          files: |
            artifacts/nova-linux-amd64/nova-linux-amd64
            artifacts/nova-macos-amd64/nova-macos-amd64
            artifacts/nova-macos-arm64/nova-macos-arm64

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: create-github-release
    steps:
      - name: Clone tap repo
        uses: actions/checkout@v4
        with:
          repository: munichbughunter/homebrew-nova
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          
      - name: Download artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir bin
          gh release download ${{ github.ref_name }} --repo munichbughunter/nova --pattern "nova-*"
          mv nova-* bin/

      - name: Calculate SHA256
        id: sha
        run: |
          echo "sha_arm=$(shasum -a 256 bin/nova-macos-arm64 | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "sha_amd=$(shasum -a 256 bin/nova-macos-amd64 | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "sha_linux=$(shasum -a 256 bin/nova-linux-amd64 | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Update Formula
        run: |
          cat > Formula/nova.rb << EOF
          class Nova < Formula
            desc "Nova CLI - Intelligent project management and development workflows"
            homepage "https://github.com/munichbughunter/nova"
            version "${{ github.ref_name }}"
            
            if OS.mac? && Hardware::CPU.arm?
              url "https://github.com/munichbughunter/nova/releases/download/${{ github.ref_name }}/nova-macos-arm64"
              sha256 "${{ steps.sha.outputs.sha_arm }}"
            elsif OS.mac? && Hardware::CPU.intel?
              url "https://github.com/munichbughunter/nova/releases/download/${{ github.ref_name }}/nova-macos-amd64"
              sha256 "${{ steps.sha.outputs.sha_amd }}"
            elsif OS.linux?
              url "https://github.com/munichbughunter/nova/releases/download/${{ github.ref_name }}/nova-linux-amd64"
              sha256 "${{ steps.sha.outputs.sha_linux }}"
            end

            def install
              bin.install Dir["*"].first => "nova"
            end

            test do
              system "#{bin}/nova", "--version"
            end
          end
          EOF

      - name: Commit and push
        env:
          GH_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Formula/nova.rb
          git commit -m "Update nova.rb for ${{ github.ref_name }}"
          git push


  notify-discord:
    name: Send Discord Notification
    runs-on: ubuntu-latest
    needs: update-homebrew
    steps:
      - name: Send Discord Notification
        uses: tsickert/discord-webhook@v7.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          embed-title: "ðŸš€ Nova Release: ${{ github.ref_name }}"
          embed-description: |
            A new version of Nova has been successfully released!

            **Installation/Update via Homebrew:**
            ```
            brew tap munichbughunter/nova
            brew install munichbughunter/nova/nova
            ```
          embed-color: 3447003
          embed-footer-text: "Nova Release Pipeline"
